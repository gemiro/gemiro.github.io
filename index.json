[
{
	"uri": "/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": " Chapter Ⅰ Kubernetes 쿠버네티스 설치 부터 운영까지\n"
},
{
	"uri": "/kubernetes/installation/",
	"title": "쿠버네티스 설치하기",
	"tags": [],
	"description": "",
	"content": " 사전 준비  Centos7이 설치된 PC 2개 준비 각각 공유기에 Lan 선이 연결되고 인터넷이 되는 상태  설치 과정 ifconfig 가 활성화 되어 있지 않다면 아래 명령어를 통해 net-tools 설치 yum install net-tools (yum update 이후)\n\r접근 편의를 위하여 ssh 서버를 설치한다. yum install openssh-server openssh-clients openssh-askpass (yum update 이후)\n\r두 PC의 NetworkManager와 firewalld를 정지시키고 Reboot 이후에도 자동 실행되지 않도록 disable 시킨다.\n# root user or sudo systemctl disable NetworkManager systemctl stop NetworkManager systemctl disable firewalld systemctl stop firewalld  Docker 설치 (모든 PC) Reference: Installing Docker CE\nDocker 설치를 위해서 Repository를 셋업 한다.\n# root user or sudo yum install -y yum-utils device-mapper-persistent-data lvm2 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo  Docker CE 설치\n# root user or sudo yum yum install docker-ce docker-ce-cli containerd.io systemctl start docker usermod -aG docker \u0026lt;your-user\u0026gt; //\u0026lt;your-user\u0026gt;부분을 사용자 명으로 변경  마지막 usermod는 non-root user가 docker명령어를 사용하기 위한 명령어로 사용자를 docker group에 포함시킨다.\nkubeadm, kubelet, kubectl 설치 (모든 PC) Reference: Installing kubeadm, kubelet and kubectl\n# root user or sudo cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kube* EOF setenforce 0 sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes systemctl enable --now kubelet cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl --system  Kubernetes 마스터 구성 (마스터 PC) Reference: Creating a single master cluster with kubeadm\n아래 과정을 통해 마스터를 설정하고 Cluster를 구성하기 위한 token을 통해 slave들을 등록한다.\n# root user or sudo kubeadm init --pod-network-cidr=10.244.0.0/16 # [init] Using Kubernetes version: vX.Y.Z # [preflight] Running pre-flight checks # [preflight] Pulling images required for setting up a Kubernetes cluster # [preflight] This might take a minute or two, depending on the speed of your internet connection # [preflight] You can also perform this action in beforehand using 'kubeadm config images pull' # [kubelet-start] Writin... # ... # Your Kubernetes master has initialized successfully! # # To start using your cluster, you need to run the following as a regular user: # # mkdir -p $HOME/.kube # sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config # sudo chown $(id -u):$(id -g) $HOME/.kube/config # # You should now deploy a pod network to the cluster. # Run \u0026quot;kubectl apply -f [podnetwork].yaml\u0026quot; with one of the options listed at: # /docs/concepts/cluster-administration/addons/ # # You can now join any number of machines by running the following on each node # as root: # # kubeadm join \u0026lt;master-ip\u0026gt;:\u0026lt;master-port\u0026gt; --token \u0026lt;token\u0026gt; --discovery-token-ca-cert-hash sha256:\u0026lt;hash\u0026gt;  위 출력 내용 중 slave를 등록하기 전 non-root user가 kubectl을 접근하는 방법을 알려주고 있다. 해당 과정을 통해 regular user를 위한 kube config 파일을 HOME/.kube로 복사한다.\n# non-root user mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config kubectl get nodes # NAME STATUS ROLES AGE VERSION # master.k8s Ready master 1d v1.13.4  등록할 slave PC로 접속하여 위에서 발급 받은 token을 사용하여 master cluster에 join한다.\n# root urser or sudo kubeadm join \u0026lt;master-ip\u0026gt;:\u0026lt;master-port\u0026gt; --token \u0026lt;token\u0026gt; --discovery-token-ca-cert-hash sha256:\u0026lt;hash\u0026gt;  join이 제대로 등록 되면 master node로 돌아가 아래 명령어를 쳐보자.\nkubectl get nodes # NAME STATUS ROLES AGE VERSION # master.k8s Ready master 1d v1.13.4 # slave1.k8s Ready \u0026lt;none\u0026gt; 1d v1.13.4  만약 Not Ready 문구가 나오면 좀 더 기다려 본다. 만약 지속적으로 Not Ready 상태이면 해당 master와 slave간 통신이 제대로 되는지 또는 /etc/hosts 파일에 각각 NAME 이름으로 host를 등록하고 다시 시도해보자.\n완료 이후 Pod 네트워크 add-on을 설치해야 다양한 네트워크 플러그인들이 존재한다. 여기서는 Flannel를 설치한다. 이유는 나중 metallb 와 호환성이 좋기 때문이다. metallb는 baremetal 상에 설치된 kubernetes에서 서비스의 LoadBalancer External IP를 제공하는 기능을 하는 플러그인이다.\n아래 명령어 한 줄이면 Flannel 구성이 완료된다.\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml  기본적으로 Master에는 pods 스케쥴링이 되지 않는다. 만약 Slave 노드 자원이 부족하여 Master 노드에도 pods 스케쥴링이 되도록 하고 싶으면 다음 명령어를 통해 마스터에도 스케쥴링 가능하도록 한다. $ kubectl taint nodes --all node-role.kubernetes.io/master- node \u0026ldquo;test-01\u0026rdquo; untainted taint \u0026ldquo;node-role.kubernetes.io/master:\u0026rdquo; not found taint \u0026ldquo;node-role.kubernetes.io/master:\u0026rdquo; not found\n\r"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Contributors Thanks to them  for making Open Source Software a better place !\n.ghContributors{\rdisplay:flex;\rflex-flow: wrap;\ralign-content: flex-start\r}\r.ghContributors  div{\rwidth: 50% ;\rdisplay: inline-flex;\rmargin-bottom: 5px;\r}\r.ghContributors  div label{\rpadding-left: 4px ;\r}\r.ghContributors  div span{\rfont-size: x-small;\rpadding-left: 4px ;\r}\r\r\r@matcornic\r149 commits\r\r\r@matalo33\r33 commits\r\r\r@lierdakil\r16 commits\r\r\r@gwleclerc\r13 commits\r\r\r@mdavids\r10 commits\r\r\r@coliff\r9 commits\r\r\r@Xipas\r5 commits\r\r\r@mreithub\r3 commits\r\r\r@massimeddu\r3 commits\r\r\r@willwade\r3 commits\r\r\r@denisvm\r2 commits\r\r\r@gpospelov\r2 commits\r\r\r@tanzaho\r2 commits\r\r\r@wikijm\r2 commits\r\r\r@lfalin\r2 commits\r\r\r@alexvargasbenamburg\r1 commits\r\r\r@afs2015\r1 commits\r\r\r@arifpedia\r1 commits\r\r\r@MrMoio\r1 commits\r\r\r@ChrisLasar\r1 commits\r\r\r@IEvangelist\r1 commits\r\r\r@giuliov\r1 commits\r\r\r@haitch\r1 commits\r\r\r@ImgBotApp\r1 commits\r\r\r@RealOrangeOne\r1 commits\r\r\r@JohnBlood\r1 commits\r\r\r@kamilchm\r1 commits\r\r\r@lloydbenson\r1 commits\r\r\r@sykesm\r1 commits\r\r\r@654wak654\r1 commits\r\r\r@PierreAdam\r1 commits\r\r\r@ripienaar\r1 commits\r\r\r@EnigmaCurry\r1 commits\r\r\r@taiidani\r1 commits\r\r\r@exKAZUu\r1 commits\r\r\r@shelane\r1 commits\r\r\r@tedyoung\r1 commits\r\r\r@Thiht\r1 commits\r\r\r@editicalu\r1 commits\r\r\r@fossabot\r1 commits\r\r\r@kamar535\r1 commits\r\r\r@nonumeros\r1 commits\r\r\r@pgorod\r1 commits\r\r\r@proelbtn\r1 commits\r\r And a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.\nPackages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo  "
},
{
	"uri": "/",
	"title": "Learn Theme for Hugo",
	"tags": [],
	"description": "",
	"content": " Hugo learn theme Hugo-theme-learn is a theme for Hugo, a fast and modern static website engine written in Go. Where Hugo is often used for blogs, this multilingual-ready theme is fully designed for documentation.\nThis theme is a partial porting of the Learn theme of Grav, a modern flat-file CMS written in PHP.\nLearn theme works with a page tree structure to organize content : All contents are pages, which belong to other pages.\n\rMain features  Unlimited menu levels Automatic next/prev buttons to navigate through menu entries  Contribute to this documentation Feel free to update this content, just click the Edit this page link displayed on top right of each page, and pullrequest it\nYour modification will be deployed automatically when merged.\n\rDocumentation website This current documentation has been statically generated with Hugo with a simple command : hugo -t hugo-theme-learn \u0026ndash; source code is available here at GitHub\nAutomatically published and hosted thanks to Netlify. Read more about Automated HUGO deployments with Netlify\n\r"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]